#:kivy 2.2.0
#:import math math
#:import MirrorViewWidget mirror_view_widget.MirrorViewWidget
#:import TecWidget mirror_view_widget.TecWidget
#:import ColorMap colormap.ColorMap
<TecWidget>:
    spot_diameter:18
    mirror_px_dia: self.mirror_circle_prop.diameter if self.mirror_circle_prop!= None else 200
    rho_norm: self.rho_phys/TecWidget.rho_max/2 if type(TecWidget.rho_max) == float else 0.5
    x_loc: self.mirror_px_dia*self.rho_norm*math.cos(self.theta)
    y_loc: self.mirror_px_dia*self.rho_norm*math.sin(self.theta)
    x_loc_abs: (self.center_x - self.spot_diameter/2) + self.x_loc
    y_loc_abs: (self.center_y - self.spot_diameter/2) + self.y_loc
    spot_rgb: ColorMap.get_rgb(self.mag_value, [-10, 10]) if self.enabled else ([0.7, 0.7, 0.7])
    
    canvas.before:
        Color:
            rgb: self.spot_rgb
            # rgb:  if self.enabled else ([0.7, 0.7, 0.7])
        Ellipse:
            size: self.spot_diameter, self.spot_diameter
            # pos: (self.center_x - self.diameter/2) + self.x_loc, (self.center_y - self.diameter/2) + self.y_loc
            pos: self.x_loc_abs, self.y_loc_abs
    size_hint: None,None

    Button:
        background_color: 0,0,0,0
        color: 0,0,0,1
        font_size: 14
        size_hint: None, None
        size: 30,30
        text: ''+str(self.parent.id_no)
        bold: True
        # pos: self.parent.x_loc_abs+self.texture_size[0]/2, self.parent.y_loc_abs+self.texture_size[1]/2
        pos: self.parent.x_loc_abs-5, self.parent.y_loc_abs-5
        on_release: TecWidget.activate_self(self.parent)
        # disabled: False

<MirrorViewWidget>:
    # border_color: 1,0,0,1
    anchor_x: 'center'
    anchor_y: 'center'
    # Widget:
    # pos: self.parent.pos
    rho_scale: 1
    MirrorCircleWidget:
        id: mirror_circle
        diameter: self.parent.diameter
        # dia: 400
        canvas.before:
            Color:
                rgba: 1, 1, 1, 1
            Ellipse:
                size: self.diameter, self.diameter
                pos: self.center_x - self.diameter/2, self.center_y - self.diameter/2
        size_hint: None,None

<MirrorViewControlPanel>:
    cols: 2
    opts_disabled: True if root.active_tec == None else False
    # GridLayout: 
    #     cols: 1
    MirrorViewWidget:
        id: mvw
        diameter: self.height*0.9
        # GridLayout:
        #     cols: 2
        #     size_hint: None, None
        #     size: 200, 50
        #     CheckBox:
        #         id: cb1
        #         size_hint_y: None
        #         height: 40
        #     CheckBox:
        #         id: cb2
        #         size_hint_y: None
        #         height: 40


    GridLayout:
        cols: 2
        size_hint_x: None
        width:600
        Button:
            size_hint_y: None
            height: 40
            text: 'Load Mirror Config'
            on_release: MirrorViewWidget.readCsv()
        Button:
            size_hint_y: None
            height: 40
            text: 'Save Mirror Config'
            disabled: not root.cfg_loaded
        BorderGridLayout:
            border_color: 1,1,1,1
            cols: 1
            Label:
                size_hint_y: None
                height: 40
                text: 'Zernike Parameters'
            BorderedLabeledIntegerInput:
                size_hint_y: None
                height: 40
                label_text: 'm index: '
                # disabled: root.opts_disabled
            BorderedLabeledIntegerInput:
                size_hint_y: None
                height: 40
                label_text: 'n index: '
                initial_value: 0
                # disabled: root.opts_disabled
            BorderedLabeledFloatInput:
                size_hint_y: None
                height: 40
                label_text: 'Angle Offset: '
                initial_value: 0.0
                # disabled: root.opts_disabled
            BorderedLabeledFloatInput:
                size_hint_y: None
                height: 40
                label_text: 'Scale: '
                # disabled: root.opts_disabled
            Button:
                size_hint_y: None
                height: 40
                text: 'Apply Zernike'
                # on_release: 

        BorderGridLayout:
            border_color: 1,1,1,1
            cols: 1

            BorderGridLayout:
                border_color: 1,1,1,1
                border_width: 1
                cols: 1
                Label: 
                    text: root.active_tec.id if root.active_tec != None else 'TEC#'
                    bold: True
                    halign: 'center'
                    size_hint_y: None
                    height: 40
                    disabled: root.opts_disabled
                BorderGridLayout:
                    cols: 1
                    GridLayout:
                        cols: 2
                        Label:
                            text: 'Command [W]:'  
                            size_hint_y: None
                            height: 40
                            halign: 'left'
                        FloatInput:
                            id: cmd_input
                            size_hint_y: None
                            height: 40
                            disabled: root.opts_disabled
                            on_text: root.update_tec_color(self.value)
                            # on_focus: #print(args); print(self.value)
                        Label:
                            text: 'Temp [C]:' 
                            # halign: 'left'
                            size_hint_y: None
                            height: 40
                        FloatInput:
                            size_hint_y: None
                            height: 40
                            disabled: True #root.opts_disabled
                    # Button:
                    #     size_hint_y: None
                    #     height: 40
                    #     text: 'Another Button'
                    #     disabled: root.opts_disabled
                        Label:
                            size_hint_y: None
                            height: 40
                            text:'Enabled: '
                            disabled: root.opts_disabled
                        CheckBox:
                            id: tec_enabled_cb
                            size_hint_y: None
                            height: 40
                            disabled: root.opts_disabled
                            active: root.active_tec.enabled if root.active_tec != None else False
                            on_release : root.setTecEnabledState(self.active)
                        Button:
                            id: enable_all_btn
                            size_hint_y: None
                            height: 40
                            text: 'Enable All'
                            disabled: not root.cfg_loaded
                            on_release: mvw.enableAll(True)
                        Button:
                            id: disable_all_btn
                            size_hint_y: None
                            height: 40
                            text: 'Disable All'
                            disabled: not root.cfg_loaded
                            on_release: mvw.enableAll(False)
            Button:
                size_hint_y: None
                height: 40
                text: 'All to Zero'
                disabled: not root.cfg_loaded
                on_release: mvw.all_to_zero(); cmd_input.setValue(0.0)

            Button:
                size_hint_y: None
                height: 40
                text: 'Send Commands'
                disabled: not root.cfg_loaded
                on_release: mvw.update_tec_map(); print('pushed2')



                    # on_release: MirrorViewWidget.readCsv()